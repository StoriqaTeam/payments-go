swagger: "2.0"
info:
  description: "Api server for wallet payments."
  version: "1.0.0"
  title: "Payments"
  contact:
    email: "a.karasev@storiqa.com"
host: "payments.storiqa.com"
basePath: "/v1"
schemes:
- "https"
- "http"
# components:
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /sessions:
    post:
      summary: Login by user and password
      parameters: 
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SessionCreateInput'
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              token: 
                $ref: '#/definitions/JWT'
        401:
          description: unauthorized
  /sessions/oauth:
    post:
      summary: Login by oauth provider
      parameters: 
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SessionOauthCreateInput'
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              token: 
                $ref: '#/definitions/JWT'
        401:
          description: unauthorized
        422:
          description: Json doesn't match schema

  /users:
    post:
      summary: Registers a new user
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UserCreateInput"
      responses:
        200:
          description: Ok
          schema:
            $ref: "#/definitions/User"
        303:
          description: User already exists
        422:
          description: Json doesn't match schema
  /users/me:
    get:
      summary: Returns current user
      security: 
        - Bearer: []
      responses:
        200:
          description: Ok
          schema:
            $ref: "#/definitions/User"
        401:
          description: Unauthorized
  /users/{userId}/accounts:
    get:
      summary: Returns list of accounts for a user. You need to be an admin or a user with `userId` to get this list. 
      security: 
        - Bearer: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user who owns accounts"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: "#/definitions/Account"
        401:
          description: Unauthorized
    post:
      summary: Creates account for a user. Only users with `userId` are allowed to create an account
      security: 
        - Bearer: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user who owns accounts"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AccountCreateInput"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Account'
        401:
          description: unauthorized
        422:
          description: Json doesn't match schema

  /users/{userId}/transactions:
    get:
      summary: Lists all transactions of a user. You need to be an admin or a user with `userId` to get this list.
      security: 
        - Bearer: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user who owns accounts"
          required: true
          type: "integer"
          format: "int64"      
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
    post:
      summary: Create a transactions for a user. Only users with `userId` are allowed to create a transaction
      security: 
        - Bearer: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user who owns accounts"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        401:
          description: unauthorized
        422:
          description: Json doesn't match schema

  /users/{userId}/accounts/{accountId}/transactions:
    get:
      summary: Lists all transactions of a user's account. You need to be an admin or a user with `userId` to get this list.
      security: 
        - Bearer: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user who owns accounts"
          required: true
          type: "integer"
          format: "int64"      
        - name: "accountId"
          in: "path"
          description: "ID of account with transcations"
          required: true
          type: "integer"
          format: "int64"      
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        401:
          description: unauthorized
        422:
          description: Json doesn't match schema
  /obfuscated_accounts:
    get:
      summary: Get obfuscated accounts for a phone number and currency
      parameters:
        - name: "phones"
          in: query
          description: "array of phones"
          required: true
          type: string
          
        - name: "currency"
          in: query
          description: "currency of accounts"
          required: true
          type: "string"
          format: "currency"
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/ObfuscatedUserAccount'

definitions:
  ObfuscatedUserAccount:
    type: object
    description: > 
      User account with *** instead of some numbers + user info like phone number and obfuscated name. 
       This one is used when you want to make a transaction and find accounts by phone number. That way
       you don't get a full info, but you get enough info for a transfer.
    properties:
      account_id: 
        type: string 
        description: obfuscated account
        example: "ofds**************dfgdfofb"
      phone:
        type: string
        description: obfuscated phone number
        example: "8903456***12"
      currency:
       $ref: '#/definitions/Currency'
    example: "dfg98h798g875hs5fg6h5sf8gh=="
  OauthJWT:
    type: string
    description: Base64 encoded Json web token for a user from Oauth provider.
    example: "dfg98h798g875hs5fg6h5sf8gh=="
  JWT:
    type: string
    description: Base64 encoded Json web token for a user from API.
    example: "gnsiocrto7cr8ctialc34=="
  SessionCreateInput:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: "a.karasev@storiqa.com"
      password:
        type: string
        example: "secret pass"
  SessionOauthCreateInput:
    type: object
    required:
      - oauthToken
      - oauthProvider
    properties:
      oauthToken:
        $ref: '#/definitions/OauthJWT'
      oauthProvider:
        $ref: '#/definitions/OauthProvider'
      
  Value:
    type: integer
    format: uint256
    description: Monetary value - either fiat or blockchain
    example: 185000000000000000000    
  Transaction:
    type: object
    required: 
      - id
      - fromAddress
      - toAddress
      - currency
      - value
    properties:
      id:
        $ref: '#/definitions/Id'
      fromAddress:
        $ref: '#/definitions/AccountAddress'
      toAddress:
        $ref: '#/definitions/AccountAddress'
      currency:
        $ref: '#/definitions/Currency'
      value:
        $ref: '#/definitions/Value'
  AccountAddress:  
    type: string
    description: Either blockchain address or fiat account number (depending on currency)
    example: "0x89595fa59d69d696d9d96"
  AccountCreateInput:
    type: object
    required:
      - id
      - currency
    properties:
      id:
        $ref: '#/definitions/Id'
      currency:
        $ref: '#/definitions/Currency'
  Account:
    type: object
    required:
      - id
      - balance
      - currency
      - userId
      - lastName
    properties:
      id:
        $ref: '#/definitions/Id'
      balance:
        $ref: '#/definitions/Value'
      currency: 
        $ref: '#/definitions/Currency'
      userId:
        type: string
        example: jghkdfgdjfgkdf7gd
      accountAddress:
        $ref: '#/definitions/AccountAddress'
  Currency:
    type: string
    description:
      ISO 4217 alphabetic code for fiat currencies in CAPS [source](https://www.currency-iso.org/en/home/tables/table-a1.html).
      Or Coinmarketcap symbol in CAPS [source](https://coinmarketcap.com/)
    example: "ETH"
  Id:
    type: string
    example: jghkdfgdjfgkdf7gd
  OauthProvider:
    type: string
    enum: [facebook, google]
    example: "facebook"
  Role:
    type: string
    enum: [user, admin]
    example: "user"
  User:
    type: object
    required:
      - email
      - password
      - phone
      - firstName
      - lastName
    properties:
      id:
        $ref: '#/definitions/Id'
      email:
        type: string
        example: a.karasev@storiqa.com
      phone:
        type: string
        example: "79034442211"
      firstName:
        type: string
        example: "Alexey"
      lastName:
        type: string
        example: "Karasev"
      role: 
        $ref: "#/definitions/Role"

  UserCreateInput:
    type: object
    required:
      - email
      - password
      - phone
      - firstName
      - lastName
    properties:
      email:
        type: string
        example: a.karasev@storiqa.com
      password:
        type: string
        example: "secret password"
      phone:
        type: string
        example: "79034442211"
      firstName:
        type: string
        example: "Alexey"
      lastName:
        type: string
        example: "Karasev"
      
